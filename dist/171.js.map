{"version":3,"file":"171.js?ver=bf42f77d4b117b2f9ff4","mappings":"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","sources":["webpack://spotify-deemo/./src/image/music.png","webpack://spotify-deemo/./src/Layout/ErrorMessage.tsx","webpack://spotify-deemo/./src/api/userApi.ts","webpack://spotify-deemo/./src/hook/useGetProfile.ts","webpack://spotify-deemo/./src/hook/local/useFocuse.ts","webpack://spotify-deemo/./src/hook/local/useInfiniteScroll.ts","webpack://spotify-deemo/./src/Layout/component/Library/EmptyPlayList.tsx","webpack://spotify-deemo/./src/image/playIcon.png","webpack://spotify-deemo/./src/Layout/component/Library/PlaylistItem.tsx","webpack://spotify-deemo/./src/Layout/component/Library/Library.tsx","webpack://spotify-deemo/./src/api/playlist.ts","webpack://spotify-deemo/./src/page/PlayList/PlayListPage.tsx","webpack://spotify-deemo/./src/utils/crypto.ts","webpack://spotify-deemo/./src/utils/auth.ts","webpack://spotify-deemo/./src/api/__baseAIP.ts","webpack://spotify-deemo/./src/style/LodingBox.tsx","webpack://spotify-deemo/./src/hook/useGetCurrentUserPlaylists.ts","webpack://spotify-deemo/./node_modules/@mui/icons-material/esm/Add.js","webpack://spotify-deemo/./src/Layout/component/Library/LibraryHead.tsx","webpack://spotify-deemo/./src/hook/useCreatePlaylist.ts","webpack://spotify-deemo/./src/image/BookmarkIcon.png"],"sourcesContent":["export default __webpack_public_path__ + \"images/music.png?ver=708d7d1874e81d24a372040f4906d76d\";","import { Alert } from \"@mui/material\";\n\nconst ErrorMessage = ({ errMessage }: { errMessage: string }) => {\n  return <Alert severity=\"error\">{errMessage} </Alert>;\n};\n\nexport default ErrorMessage;\n","import { UserProfile } from \"../models/user\";\nimport { logout } from \"../utils/auth\";\nimport api from \"./__baseAIP\";\n\nexport const getCurrentUserProfile = async (): Promise<UserProfile> => {\n  try {\n    const res = await api.get(\"/me\");\n    return res.data;\n  } catch (err) {\n    logout();\n    throw new Error(\"프로필 얻기 실패\");\n  }\n};\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { getCurrentUserProfile } from \"../api/userApi\";\nimport { UserProfile } from \"../models/user\";\n\nconst useGetProfile = (): UseQueryResult<UserProfile> => {\n  const accessToken = localStorage.getItem(\"access_token\");\n\n  return useQuery({\n    queryKey: [\"current-user-profile\"],\n    queryFn: getCurrentUserProfile,\n    enabled: !!accessToken, // ac 토큰이 있을 때만 실행\n    staleTime: Infinity, // 무한대로 설정하여 한 번 받아온 데이터는 계속 신선한 것으로 간주\n    refetchOnWindowFocus: false, // 윈도우 포커스 시 재요청 방지\n    refetchOnMount: false, // 컴포넌트 마운트 시 재요청 방지 (이미 캐시된 데이터가 있는 경우)\n    retry: 1, // 실패 시 1번만 재시도\n  });\n};\n\nexport default useGetProfile;\n","import { useState } from \"react\";\n\nconst useFouces = () => {\n  const [isfocuse, setIsfocuse] = useState<\"show\" | \"none\">(\"none\");\n\n  const on = () => setIsfocuse(\"show\");\n  const off = () => setIsfocuse(\"none\");\n\n  return { isfocuse, on, off };\n};\n\nexport default useFouces;\n","import { useEffect } from \"react\";\n\nconst useInfiniteScroll = ({\n  page,\n  isLoading,\n  isFinished,\n  onIntersect,\n}: {\n  page: string;\n  isLoading: boolean;\n  isFinished: boolean;\n  onIntersect: () => void;\n}) => {\n  useEffect(() => {\n    if (isLoading) return;\n    if (isFinished) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting) {\n          onIntersect();\n        }\n      },\n      { threshold: 0 }\n    );\n\n    const observerTarget = document.getElementById(`observer-${page}`);\n    if (observerTarget) observer.observe(observerTarget);\n\n    return () => {\n      if (observerTarget) observer.unobserve(observerTarget);\n    };\n  }, [isLoading, isFinished, onIntersect]);\n};\n\nexport default useInfiniteScroll;\n","import { Button, styled, Typography } from \"@mui/material\";\n\nconst EmptyPlayList = () => {\n  return (\n    <EmptyPlaylistCard>\n      <Typography variant=\"h2\" fontWeight={700}>\n        첫 번째 플레이리스트를 만드세요.\n      </Typography>\n      <div>어렵지 않아요. 저희가 도와드릴게요.</div>\n\n      <CreateBtn variant=\"contained\" color=\"secondary\">\n        플레이리스트 만들기\n      </CreateBtn>\n    </EmptyPlaylistCard>\n  );\n};\n\nexport default EmptyPlayList;\n\nconst EmptyPlaylistCard = styled(\"div\")`\n  padding: 1.5rem;\n  margin-top: 0.5rem;\n  color: white;\n  background-color: #1a1a1a;\n  border-radius: 8;\n`;\n\nconst CreateBtn = styled(Button)`\n  margin-top: 1rem;\n  font-weight: 700;\n`;\n","export default __webpack_public_path__ + \"images/playIcon.png?ver=7a010c498114f1e71e07aada8cdfc680\";","import { styled, Typography } from \"@mui/material\";\nimport useFouces from \"../../../hook/local/useFocuse\";\nimport MusicIcon from \"../../../image/music.png\";\nimport playIcon from \"../../../image/playIcon.png\";\nimport { SimplifiedPlaylist } from \"../../../models/playlist\";\n\nconst Playlist = ({\n  item,\n  onClick,\n  isSelect,\n}: {\n  item: SimplifiedPlaylist;\n  onClick: () => void;\n  isSelect: boolean;\n}) => {\n  const focuse = useFouces();\n\n  return (\n    <ItemBox\n      onClick={onClick}\n      className={isSelect ? \"select\" : \"\"}\n      onMouseOver={focuse.on}\n      onMouseLeave={focuse.off}\n    >\n      <PicBox>\n        <PlayIcon src={playIcon} className={focuse.isfocuse} />\n\n        {item.images ? (\n          <img src={item.images[0].url} />\n        ) : (\n          <img className=\"musicIcon\" src={MusicIcon} />\n        )}\n      </PicBox>\n\n      <div>\n        <Typography fontSize={16}>{item.name}</Typography>\n        <Typography color=\"#B3B3B3\">\n          플레이리스트 • {item?.owner?.display_name || \"알수없음\"}\n        </Typography>\n      </div>\n    </ItemBox>\n  );\n};\n\nexport default Playlist;\n\nconst ItemBox = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  padding: 0.6rem;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &.select {\n    background-color: #404040;\n  }\n  &:hover {\n    background-color: #1c1c1c;\n  }\n`;\nconst PicBox = styled(\"div\")`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 3.5rem;\n  aspect-ratio: 1/1;\n  margin-right: 1rem;\n  border-radius: 4px;\n  overflow: hidden;\n  background-color: #313131;\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n  img.musicIcon {\n    width: 70%;\n    height: 70%;\n  }\n`;\nconst PlayIcon = styled(\"img\")`\n  display: none;\n  position: absolute;\n  background-color: #0000007f;\n  &.show {\n    display: block;\n  }\n`;\n","import styled from \"@mui/styled-engine-sc\";\nimport useGetCurrentUserPlaylists from \"../../../hook/useGetCurrentUserPlaylists\";\nimport useGetProfile from \"../../../hook/useGetProfile\";\nimport useInfiniteScroll from \"../../../hook/local/useInfiniteScroll\";\nimport LoadingBar from \"../../../style/LoadingBar\";\nimport ErrorMessage from \"../../ErrorMessage\";\nimport LoadState, { Observer } from \"../../../style/LodingBox\";\nimport EmptyPlayList from \"./EmptyPlayList\";\nimport PlaylistItem from \"./PlaylistItem\";\nimport { useNavigate, useParams } from \"react-router\";\n\nconst Library = ({ isMoblie }: { isMoblie?: boolean }) => {\n  const Navigate = useNavigate();\n  const { id = \"\" } = useParams();\n\n  const { data: user } = useGetProfile();\n  const {\n    data,\n    isLoading,\n    error,\n    hasNextPage, // 다음페이지 있는지?: boolean\n    fetchNextPage, // 다음페이지 가져오는 함수\n    isFetchingNextPage, // 다음페이지 가져오는 중인지? : boolean\n  } = useGetCurrentUserPlaylists({\n    limit: 10,\n    enabled: !!user, // user가 있을 때만 실행\n  });\n\n  // 커스텀 무한 스크롤\n  useInfiniteScroll({\n    page: isMoblie ? \"library-mobile\" : \"library\",\n    isLoading: isFetchingNextPage,\n    isFinished: !hasNextPage,\n    onIntersect: fetchNextPage,\n  });\n\n  const goPlaylistDetail = (id: string) => Navigate(`/playlist/${id}`);\n\n  if (!user) {\n    return <EmptyPlayList />;\n  }\n  if (isLoading) {\n    return <LoadingBar />;\n  }\n  if (error) {\n    return <ErrorMessage errMessage={error.message} />;\n  }\n  if (!data?.pages || data.pages[0].total === 0) {\n    return <EmptyPlayList />;\n  }\n  return (\n    <ListBox>\n      {data.pages.map((page) =>\n        page.items.map((item, idx) => (\n          <PlaylistItem\n            key={idx}\n            item={item}\n            onClick={() => goPlaylistDetail(item.id || \"\")}\n            isSelect={id === item.id}\n          />\n        ))\n      )}\n\n      <LoadState isLoading={isFetchingNextPage} isFinished={!hasNextPage} />\n      {!isFetchingNextPage && (\n        <Observer id={`observer-${isMoblie ? \"library-mobile\" : \"library\"}`} />\n      )}\n    </ListBox>\n  );\n};\n\nexport default Library;\n\nconst ListBox = styled(\"div\")`\n  height: 100%;\n  padding-bottom: 7rem;\n  overflow: scroll;\n`;\n","import axios, { isAxiosError } from \"axios\";\nimport {\n  AddItemToPlaylist,\n  CreatePlaylist,\n  GetCurrentUserPlaylistReq,\n  GetCurrentUserPlaylistRes,\n  GetPlaylistItemsReq,\n  GetPlaylistItemsRes,\n  GetPlaylistReq,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"./__baseAIP\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistReq): Promise<GetCurrentUserPlaylistRes> => {\n  try {\n    const res = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"실패: playlist 가져오기\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistReq\n): Promise<Playlist> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail getPlaylist\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsReq\n): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylist\n): Promise<Playlist> => {\n  try {\n    const { name, collaborative, description } = params;\n    const res = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: params.public,\n      collaborative,\n      description,\n    });\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail createPlaylist\");\n  }\n};\n\nexport const addItemstoPlaylist = async (\n  params: AddItemToPlaylist\n): Promise<{ snapshot_id: string }> => {\n  try {\n    const res = await api.post(\n      `/playlists/${params.playlist_id}/tracks`,\n      params\n    );\n\n    return res.data;\n  } catch (err) {\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail add item to playlist\");\n  }\n};\n\n/** 기존거에서 acToken -> clientToken 순으로 검사해서 토큰 전달하는걸로 수정바람 */\nexport const getPlaylistItems_home = async ({\n  token,\n  params,\n}: {\n  token: string;\n  params: GetPlaylistItemsReq;\n}): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await axios.get(\n      `${SPOTIFY_BASE_URL}/playlists/${params.playlist_id}/tracks`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        params,\n      }\n    );\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n","import Library from \"../../Layout/component/Library/Library\";\nimport LibraryHead from \"../../Layout/component/Library/LibraryHead\";\n\nconst PlayListPage = () => {\n  return (\n    <>\n      <LibraryHead />\n      <Library isMoblie={true} />\n    </>\n  );\n};\nexport default PlayListPage;\n","// https://developer.spotify.com/documentation/web-api/tutorials/code-pkce-flow\n\nexport const generateRandomString = (length: number): string => {\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const values = crypto.getRandomValues(new Uint8Array(length));\n  return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n};\n\nexport const sha256 = async (plain: string): Promise<ArrayBuffer> => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(plain);\n  return window.crypto.subtle.digest(\"SHA-256\", data);\n};\n\nexport const base64encode = (input: ArrayBuffer) => {\n  return btoa(String.fromCharCode(...new Uint8Array(input)))\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n};\n","import { clientID, SCOPES } from \"../configs/auth\";\nimport { REDIRCT_URI } from \"../configs/commonConfig\";\nimport { AuthParamsType } from \"../models/auth\";\nimport { base64encode, generateRandomString, sha256 } from \"./crypto\";\n\nexport const getSpotifyLogin = async () => {\n  const codeVerifier = generateRandomString(64);\n  const hashed = await sha256(codeVerifier);\n  const codeChallenge = base64encode(hashed);\n\n  const clientId = clientID;\n  const redirectUri = REDIRCT_URI;\n\n  const scope = SCOPES;\n  const authUrl = new URL(\"https://accounts.spotify.com/authorize\");\n\n  // generated in the previous step\n  window.localStorage.setItem(\"code_verifier\", codeVerifier);\n\n  if (clientId && redirectUri) {\n    const params: AuthParamsType = {\n      response_type: \"code\",\n      client_id: clientId,\n      scope,\n      code_challenge_method: \"S256\",\n      code_challenge: codeChallenge,\n      redirect_uri: redirectUri,\n    };\n\n    authUrl.search = new URLSearchParams(Object.entries(params)).toString();\n\n    // console.log(authUrl.search);\n    window.location.href = authUrl.toString(); // spotify login 주소 열림\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"code_verifier\");\n  localStorage.removeItem(\"access_token\");\n  window.location.href = \"/\";\n};\n","import axios, { AxiosInstance } from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nconst api: AxiosInstance = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n  },\n});\n\napi.interceptors.request.use((req) => {\n  req.headers.Authorization = `Bearer ${localStorage.getItem(\"access_token\")}`;\n\n  return req;\n});\n\nexport default api;\n","import styled from \"@mui/styled-engine-sc\";\nimport { LoadingSpinner } from \"./LoadingBar\";\n\nconst LoadState = ({\n  isLoading,\n  isFinished,\n  showText = true,\n}: {\n  isLoading: boolean;\n  isFinished: boolean;\n  showText?: boolean;\n}) => {\n  return (\n    <Loding>\n      {isLoading ? (\n        <LoadingSpinner width={30} height={30} />\n      ) : isFinished && showText ? (\n        <div>마지막 입니다.</div>\n      ) : (\n        <></>\n      )}\n    </Loding>\n  );\n};\n\nexport default LoadState;\n\nconst Loding = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 3rem;\n  font-size: 14px;\n  color: #858585;\n`;\n\nexport const Observer = styled(\"div\")`\n  height: 1rem;\n  /* background-color: yellow; */\n`;\n","import { useInfiniteQuery } from \"@tanstack/react-query\";\nimport { getCurrentUserPlaylists } from \"../api/playlist\";\nimport { GetCurrentUserPlaylistReq } from \"../models/playlist\";\n\nconst useGetCurrentUserPlaylists = ({\n  limit,\n  enabled,\n}: GetCurrentUserPlaylistReq & { enabled: boolean }) => {\n  return useInfiniteQuery({\n    queryKey: [\"current-user-playlists\"],\n    queryFn: ({ pageParam }) => {\n      return getCurrentUserPlaylists({ limit, offset: pageParam });\n    },\n    enabled,\n    initialPageParam: 0, // 시작 value\n    getNextPageParam: (lastPage) => {\n      // infinitQuery 핵심.\n      // 해당 함수의 리턴값이 pageParam으로 전달된다\n      if (lastPage.next) {\n        const url = new URL(lastPage.next);\n        const nextOffset = url.searchParams.get(\"offset\");\n        return nextOffset ? parseInt(nextOffset) : undefined;\n      }\n      return undefined; // undefined를 호출하면 알아서 멈춘다.\n    },\n  });\n};\n\nexport default useGetCurrentUserPlaylists;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","import { Box, Button, styled, Typography } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport BookmarkIcon from \"../../../image/BookmarkIcon.png\";\nimport useCreatePlaylist from \"../../../hook/useCreatePlaylist\";\n\nconst LibraryHead = () => {\n  const { mutate: createPlaylist } = useCreatePlaylist();\n  const handleCreatePlaylist = () => {\n    createPlaylist({ name: \"내 풀레이리스트\" });\n  };\n\n  return (\n    <Head>\n      <Box display=\"flex\">\n        <Icon src={BookmarkIcon} alt=\"북마크 아이콘\" />\n        <Typography variant=\"h2\" fontWeight={700}>\n          내 라이브러리\n        </Typography>\n      </Box>\n\n      <Button onClick={handleCreatePlaylist}>\n        <AddIcon />\n      </Button>\n    </Head>\n  );\n};\n\nexport default LibraryHead;\n\nconst Head = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 1rem;\n`;\nconst Icon = styled(\"img\")`\n  width: 25px;\n  margin-right: 20px;\n`;\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createPlaylist } from \"../api/playlist\";\nimport { CreatePlaylist } from \"../models/playlist\";\nimport useGetProfile from \"./useGetProfile\";\nimport { getSpotifyLogin } from \"../utils/auth\";\n\nconst useCreatePlaylist = () => {\n  const queryClient = useQueryClient();\n  const { data: user } = useGetProfile();\n\n  return useMutation({\n    mutationFn: (params: CreatePlaylist) => {\n      if (user && user.id) {\n        return createPlaylist(user?.id, params);\n      }\n      getSpotifyLogin(); // user정보 없을 시 login\n      return Promise.reject(new Error(\"user is not defined\"));\n    },\n    onSuccess: () => {\n      // refetch\n      queryClient.invalidateQueries({ queryKey: [\"current-user-playlists\"] });\n    },\n  });\n};\n\nexport default useCreatePlaylist;\n","export default __webpack_public_path__ + \"images/BookmarkIcon.png?ver=b29bf0ae7706e635c9f6294781e08862\";"],"names":["_ref","errMessage","_jsxs","Alert","severity","children","getCurrentUserProfile","async","api","get","data","err","logout","Error","useGetProfile","accessToken","localStorage","getItem","useQuery","queryKey","queryFn","enabled","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","retry","useFouces","isfocuse","setIsfocuse","useState","on","off","page","isLoading","isFinished","onIntersect","useEffect","observer","IntersectionObserver","entries","isIntersecting","threshold","observerTarget","document","getElementById","concat","observe","unobserve","EmptyPlayList","EmptyPlaylistCard","_jsx","Typography","variant","fontWeight","CreateBtn","color","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","_item$owner","item","onClick","isSelect","focuse","ItemBox","className","onMouseOver","onMouseLeave","PicBox","PlayIcon","src","playIcon","images","url","MusicIcon","fontSize","name","owner","display_name","_templateObject3","isMoblie","Navigate","useNavigate","id","useParams","user","error","hasNextPage","fetchNextPage","isFetchingNextPage","useGetCurrentUserPlaylists","limit","useInfiniteScroll","LoadingBar","ErrorMessage","message","pages","total","ListBox","map","items","idx","PlaylistItem","goPlaylistDetail","LoadState","Observer","getCurrentUserPlaylists","offset","params","getPlaylist","playlist_id","_err$response","console","log","isAxiosError","response","status","getPlaylistItems","createPlaylist","user_id","collaborative","description","post","public","addItemstoPlaylist","_err$response2","getPlaylistItems_home","token","_ref2","axios","SPOTIFY_BASE_URL","headers","Authorization","PlayListPage","_Fragment","LibraryHead","Library","getSpotifyLogin","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","clientID","redirectUri","REDIRCT_URI","scope","SCOPES","authUrl","URL","setItem","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","URLSearchParams","Object","toString","location","href","removeItem","create","baseURL","interceptors","request","use","req","showText","Loding","LoadingSpinner","width","height","useInfiniteQuery","pageParam","initialPageParam","getNextPageParam","lastPage","next","nextOffset","searchParams","parseInt","undefined","createSvgIcon","d","mutate","useCreatePlaylist","queryClient","useQueryClient","useMutation","mutationFn","Promise","reject","onSuccess","invalidateQueries","Head","Box","display","Icon","BookmarkIcon","alt","handleCreatePlaylist","AddIcon"],"sourceRoot":""}