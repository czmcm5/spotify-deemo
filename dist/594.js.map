{"version":3,"file":"594.js?ver=cbbefe60358f9d293516","mappings":"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","sources":["webpack://spotify-deemo/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://spotify-deemo/./src/image/music.png","webpack://spotify-deemo/./src/query/useGetSpoAccessToken.ts","webpack://spotify-deemo/./src/Layout/ErrorMessage.tsx","webpack://spotify-deemo/./node_modules/axios/index.js","webpack://spotify-deemo/./src/api/playlist.ts","webpack://spotify-deemo/./src/hook/useFocuse.ts","webpack://spotify-deemo/./src/api/__baseAIP.ts","webpack://spotify-deemo/./src/style/CardStyled.tsx","webpack://spotify-deemo/./src/page/Home/component/Card.tsx","webpack://spotify-deemo/./src/image/playArrow.png","webpack://spotify-deemo/./src/page/Home/component/PlayBtn.tsx","webpack://spotify-deemo/./src/models/search.ts","webpack://spotify-deemo/./src/utils/type.ts","webpack://spotify-deemo/./src/page/Search/component/ArtistCardList.tsx","webpack://spotify-deemo/./src/utils/navigate.ts","webpack://spotify-deemo/./src/page/Home/component/NowReleases.tsx","webpack://spotify-deemo/./src/query/useGetNewReleases.ts","webpack://spotify-deemo/./src/api/albumApi.ts","webpack://spotify-deemo/./src/page/Home/component/Card_basic.tsx","webpack://spotify-deemo/./src/page/Home/component/RecommendedTracks.tsx","webpack://spotify-deemo/./src/page/Home/hook/useGetPlaylistItem.ts","webpack://spotify-deemo/./src/page/Home/component/Albums.tsx","webpack://spotify-deemo/./src/page/Home/HomePage.tsx","webpack://spotify-deemo/./src/query/useSearchitems.ts","webpack://spotify-deemo/./src/api/searchApi.ts"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","export default __webpack_public_path__ + \"images/music.png?ver=708d7d1874e81d24a372040f4906d76d\";","import { useQuery } from \"@tanstack/react-query\";\nimport { getSpotifyToken } from \"../api/authApi\";\n\nconst useGetSpoAccessToken = () => {\n  const { data } = useQuery({\n    queryKey: [\"spo-access-token\"],\n    queryFn: getSpotifyToken,\n  });\n\n  const accessToken = data?.access_token;\n  return accessToken;\n};\n\nexport default useGetSpoAccessToken;\n","import { Alert } from \"@mui/material\";\n\nconst ErrorMessage = ({ errMessage }: { errMessage: string }) => {\n  return <Alert severity=\"error\">{errMessage} </Alert>;\n};\n\nexport default ErrorMessage;\n","import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n","import axios, { isAxiosError } from \"axios\";\nimport {\n  AddItemToPlaylist,\n  CreatePlaylist,\n  GetCurrentUserPlaylistReq,\n  GetCurrentUserPlaylistRes,\n  GetPlaylistItemsReq,\n  GetPlaylistItemsRes,\n  GetPlaylistReq,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"./__baseAIP\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistReq): Promise<GetCurrentUserPlaylistRes> => {\n  try {\n    const res = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"실패: playlist 가져오기\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistReq\n): Promise<Playlist> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail getPlaylist\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsReq\n): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylist\n): Promise<Playlist> => {\n  try {\n    const { name, collaborative, description } = params;\n    const res = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: params.public,\n      collaborative,\n      description,\n    });\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail createPlaylist\");\n  }\n};\n\nexport const addItemstoPlaylist = async (\n  params: AddItemToPlaylist\n): Promise<{ snapshot_id: string }> => {\n  try {\n    const res = await api.post(\n      `/playlists/${params.playlist_id}/tracks`,\n      params\n    );\n\n    return res.data;\n  } catch (err) {\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail add item to playlist\");\n  }\n};\n\n/** 기존거에서 acToken -> clientToken 순으로 검사해서 토큰 전달하는걸로 수정바람 */\nexport const getPlaylistItems_home = async ({\n  token,\n  params,\n}: {\n  token: string;\n  params: GetPlaylistItemsReq;\n}): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await axios.get(\n      `${SPOTIFY_BASE_URL}/playlists/${params.playlist_id}/tracks`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        params,\n      }\n    );\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n","import { useState } from \"react\";\n\nconst useFouces = () => {\n  const [isfocuse, setIsfocuse] = useState<\"show\" | \"none\">(\"none\");\n\n  const on = () => setIsfocuse(\"show\");\n  const off = () => setIsfocuse(\"none\");\n\n  return { isfocuse, on, off };\n};\n\nexport default useFouces;\n","import axios, { AxiosInstance } from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nconst api: AxiosInstance = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n  },\n});\n\napi.interceptors.request.use((req) => {\n  req.headers.Authorization = `Bearer ${localStorage.getItem(\"access_token\")}`;\n\n  return req;\n});\n\nexport default api;\n","import { styled } from \"@mui/material\";\n\nexport const CardGridList = styled(\"div\")`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  ${({ theme }) => theme.breakpoints.down(\"md\")} {\n    grid-template-columns: 1fr 1fr 1fr;\n    display: grid;\n  }\n  ${({ theme }) => theme.breakpoints.down(\"sm\")} {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n","import { styled, Typography } from \"@mui/material\";\nimport useFouces from \"../../../hook/useFocuse\";\nimport { AlbumItemType } from \"../../../models/album\";\nimport PlayBtn from \"./PlayBtn\";\nimport { goSpotify } from \"../../../utils/navigate\";\n\nconst CardList = ({ albums }: { albums: AlbumItemType }) => {\n  const focuse = useFouces();\n\n  const handleGoSpotifyWeb = () => {\n    goSpotify({ type: \"album\", id: albums.id });\n  };\n\n  return (\n    <CardBox onMouseOver={focuse.on} onMouseLeave={focuse.off}>\n      <PicBox>\n        <img\n          src={albums.images[0]?.url}\n          alt={albums.name}\n          className=\"Thumbnail\"\n        />\n        <PlayBtn isfocuse={focuse.isfocuse} onClick={handleGoSpotifyWeb} />\n      </PicBox>\n\n      <Title>{albums.name}</Title>\n      <Typography variant=\"subtitle1\">{albums.artists[0].name}</Typography>\n    </CardBox>\n  );\n};\n\nexport default CardList;\n\nconst CardBox = styled(\"div\")`\n  flex: 1;\n  padding: 1rem;\n  border-radius: 8px;\n  :hover {\n    background-color: #272727;\n  }\n`;\nconst Title = styled(Typography)`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`;\nconst PicBox = styled(\"div\")`\n  position: relative;\n  width: 100%;\n  aspect-ratio: 1/1;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  overflow: hidden;\n  img.Thumbnail {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n","export default __webpack_public_path__ + \"images/playArrow.png?ver=268195a693e6364e31a52dd9ebe3c5d5\";","import { styled } from \"@mui/material\";\nimport PlayArrow from \"../../../image/playArrow.png\";\n\nconst PlayBtn = ({\n  isfocuse,\n  ...props\n}: {\n  isfocuse: \"show\" | \"none\";\n  onClick?: () => void;\n}) => {\n  return (\n    <Btn className={isfocuse} {...props}>\n      <img src={PlayArrow} alt=\"재생버튼\" />\n    </Btn>\n  );\n};\n\nexport default PlayBtn;\n\nconst Btn = styled(\"div\")`\n  position: absolute;\n  right: 5%;\n  bottom: -10%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 3rem;\n  aspect-ratio: 1/1;\n  border-radius: 50px;\n  background-color: #1ed760;\n  box-shadow: 0 3px 5px 2px #00000072;\n\n  opacity: 0;\n  transition: bottom 0.4s ease, opacity 0.4s ease;\n  &.show {\n    bottom: 5%;\n    opacity: 1;\n  }\n\n  :hover {\n    width: 3.1rem;\n    background-color: #29ea6d;\n  }\n  img {\n    width: 25px;\n    height: 25px;\n  }\n`;\n","import { AlbumItemType } from \"./album\";\nimport { ApiRes } from \"./apiRes\";\nimport { ArtistsType } from \"./artist\";\nimport { SimplifiedPlaylist } from \"./playlist\";\nimport {\n  EpisodeObject,\n  SimplifedAudiobook,\n  SimplifiedShow,\n  TrackObject,\n} from \"./tracks\";\n\nexport enum SEARCH_TYPE {\n  Album = \"album\",\n  Artist = \"artist\",\n  Playlist = \"playlists\",\n  Track = \"track\",\n  Show = \"show\",\n  Episode = \"episode\",\n  Audiobook = \"audiobook\",\n}\n\nexport interface SearchReq {\n  q: string;\n  type: SEARCH_TYPE[];\n  market?: number;\n  limit?: number;\n  offset?: number;\n  include_external?: string;\n}\n\nexport interface SearchRes {\n  artists?: ApiRes<ArtistsType>;\n  albums?: ApiRes<AlbumItemType>;\n  tracks?: ApiRes<TrackObject>;\n  playlists?: ApiRes<SimplifiedPlaylist>;\n  shows?: ApiRes<SimplifiedShow>;\n  episodes?: ApiRes<EpisodeObject>;\n  audiobooks?: ApiRes<SimplifedAudiobook>;\n}\n","import { EpisodeObject, TrackObject } from \"../models/tracks\";\n\nexport const isEpisode = (\n  track: TrackObject | EpisodeObject\n): track is EpisodeObject => {\n  return \"description\" in track;\n};\n","import { styled, Typography } from \"@mui/material\";\nimport { ArtistsType } from \"../../../models/artist\";\nimport PlayBtn from \"../../Home/component/PlayBtn\";\nimport useFouces from \"../../../hook/useFocuse\";\nimport MusicIcon from \"../../../image/music.png\";\nimport { goSpotify } from \"../../../utils/navigate\";\n\nconst ArtistCardList = ({ artists }: { artists: ArtistsType }) => {\n  const focuse = useFouces();\n\n  const handleGoSpotifyWeb = () => {\n    if (artists.id) {\n      goSpotify({ type: \"artist\", id: artists.id });\n    }\n  };\n\n  return (\n    <CardBox onMouseOver={focuse.on} onMouseLeave={focuse.off}>\n      <PicBox>\n        <img\n          src={artists.images[0]?.url || MusicIcon}\n          alt={artists.name}\n          className=\"Thumbnail\"\n        />\n        <PlayBtn isfocuse={focuse.isfocuse} onClick={handleGoSpotifyWeb} />\n      </PicBox>\n\n      <Title>{artists.name}</Title>\n      <Typography variant=\"subtitle1\">Artist</Typography>\n    </CardBox>\n  );\n};\n\nexport default ArtistCardList;\n\nconst CardBox = styled(\"div\")`\n  flex: 1;\n  padding: 1rem;\n  border-radius: 8px;\n  :hover {\n    background-color: #272727;\n  }\n`;\nconst Title = styled(Typography)`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`;\nconst PicBox = styled(\"div\")`\n  position: relative;\n  width: 100%;\n  aspect-ratio: 1/1;\n  margin-bottom: 1rem;\n  img.Thumbnail {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n  }\n`;\n","export const goSpotify = ({ type, id }: { type: string; id: string }) => {\n  window.open(`https://open.spotify.com/${type}/${id}`);\n};\n","import useGetNewReleases from \"../../../query/useGetNewReleases\";\nimport ErrorMessage from \"../../../Layout/ErrorMessage\";\nimport { CardGridList } from \"../../../style/CardStyled\";\nimport LoadingBar from \"../../../style/LoadingBar\";\nimport CardList from \"./Card\";\n\nconst NowReleases = () => {\n  const { data, error, isLoading } = useGetNewReleases();\n\n  if (isLoading) {\n    return <LoadingBar />;\n  }\n  if (error) {\n    return <ErrorMessage errMessage={error.message} />;\n  }\n  return (\n    <CardGridList>\n      {data?.albums.items.map((item, idx) => (\n        <CardList key={idx} albums={item} />\n      ))}\n    </CardGridList>\n  );\n};\nexport default NowReleases;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getNewReleases } from \"../api/albumApi\";\nimport useGetSpoAccessToken from \"./useGetSpoAccessToken\";\n\nconst useGetNewReleases = () => {\n  const clientToken = useGetSpoAccessToken();\n\n  return useQuery({\n    queryKey: [\"new-releases\"],\n    queryFn: async () => {\n      if (!clientToken) throw new Error(\"No token available\");\n\n      return getNewReleases(clientToken);\n    },\n  });\n};\n\nexport default useGetNewReleases;\n","import axios from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\nimport { GetNewReleasesRes } from \"../models/album\";\n\nexport const getNewReleases = async (\n  token: string\n): Promise<GetNewReleasesRes> => {\n  const limit = 6;\n\n  try {\n    const res = await axios.get(\n      `${SPOTIFY_BASE_URL}/browse/new-releases?limit=${limit}`,\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n\n    // console.log(res.data);\n\n    return res.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch new releases\");\n  }\n};\n","import { styled, Typography } from \"@mui/material\";\nimport useFouces from \"../../../hook/useFocuse\";\nimport MusicIcon from \"../../../image/music.png\";\nimport PlayBtn from \"./PlayBtn\";\nimport { goSpotify } from \"../../../utils/navigate\";\n\ninterface CardBasicProps {\n  imgUrl?: string;\n  mainTitle?: string;\n  subTitle?: string;\n  type?: string;\n  id?: string;\n}\n\nconst CardBoxBasic = ({\n  imgUrl = MusicIcon,\n  mainTitle = \"\",\n  subTitle = \"\",\n  type,\n  id,\n}: CardBasicProps) => {\n  const focuse = useFouces();\n\n  const handleGoSpotifyWeb = () => {\n    if (type && id) {\n      goSpotify({ type, id });\n    }\n  };\n\n  return (\n    <CardBox onMouseOver={focuse.on} onMouseLeave={focuse.off}>\n      <PicBox>\n        <img src={imgUrl} alt={mainTitle} className=\"Thumbnail\" />\n        <PlayBtn isfocuse={focuse.isfocuse} onClick={handleGoSpotifyWeb} />\n      </PicBox>\n\n      <Title>{mainTitle}</Title>\n      <Typography variant=\"subtitle1\">{subTitle}</Typography>\n    </CardBox>\n  );\n};\n\nexport default CardBoxBasic;\n\nconst CardBox = styled(\"div\")`\n  flex: 1;\n  padding: 1rem;\n  border-radius: 8px;\n  :hover {\n    background-color: #272727;\n  }\n`;\nconst Title = styled(Typography)`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`;\nconst PicBox = styled(\"div\")`\n  position: relative;\n  width: 100%;\n  aspect-ratio: 1/1;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  overflow: hidden;\n  img.Thumbnail {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n","import ErrorMessage from \"../../../Layout/ErrorMessage\";\nimport { CardGridList } from \"../../../style/CardStyled\";\nimport { isEpisode } from \"../../../utils/type\";\nimport useGetPlaylistItem from \"../hook/useGetPlaylistItem\";\nimport CardBoxBasic from \"./Card_basic\";\n\nconst RecommendTrakcs = ({ playlist_id }: { playlist_id: string }) => {\n  const { data, error } = useGetPlaylistItem(playlist_id);\n\n  if (error) {\n    return <ErrorMessage errMessage={error.message} />;\n  }\n  return (\n    <CardGridList>\n      {data?.items.map((item, idx) => {\n        const imageSrc = isEpisode(item.track)\n          ? item.track.imgaes[0].url\n          : item.track.album.images?.[0]?.url;\n\n        const artistName = isEpisode(item.track)\n          ? \"\"\n          : item.track.artists[0].name;\n\n        return (\n          <CardBoxBasic\n            key={idx}\n            imgUrl={imageSrc}\n            mainTitle={item.track.name}\n            subTitle={artistName}\n            type={item.track.type}\n            id={item.track.id}\n          />\n        );\n      })}\n    </CardGridList>\n  );\n};\nexport default RecommendTrakcs;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getPlaylistItems_home } from \"../../../api/playlist\";\nimport useGetSpoAccessToken from \"../../../query/useGetSpoAccessToken\";\n\nconst useGetPlaylistItem = (playlist_id: string) => {\n  const clientToken = useGetSpoAccessToken();\n\n  return useQuery({\n    queryKey: [\"my-playlist\", playlist_id],\n    queryFn: async () => {\n      if (!clientToken) throw new Error(\"No token available\");\n\n      return getPlaylistItems_home({\n        token: clientToken,\n        params: { playlist_id, limit: 12 },\n      });\n    },\n  });\n};\n\nexport default useGetPlaylistItem;\n","import useSearchitems from \"../../../query/useSearchitems\";\nimport ErrorMessage from \"../../../Layout/ErrorMessage\";\nimport { SEARCH_TYPE } from \"../../../models/search\";\nimport { CardGridList } from \"../../../style/CardStyled\";\nimport ArtistCardList from \"../../Search/component/ArtistCardList\";\n\nconst Albums = ({\n  keyword,\n  type,\n  limit,\n}: {\n  keyword: string;\n  type: SEARCH_TYPE[];\n  limit: number;\n}) => {\n  const { data, error } = useSearchitems({\n    q: keyword,\n    type,\n    limit,\n  });\n\n  if (!data?.pages[0]) {\n    return null;\n  }\n  if (error) {\n    return <ErrorMessage errMessage={error.message} />;\n  }\n  return (\n    <CardGridList>\n      {data.pages.map((page) =>\n        page?.artists?.items.map((item, i) => (\n          <ArtistCardList key={i} artists={item} />\n        ))\n      )}\n    </CardGridList>\n  );\n};\nexport default Albums;\n","import { styled, Typography } from \"@mui/material\";\nimport NowReleases from \"./component/NowReleases\";\nimport RecommendTrakcs from \"./component/RecommendedTracks\";\nimport Albums from \"./component/Albums\";\nimport { SEARCH_TYPE } from \"../../models/search\";\n\nconst HomePage = () => {\n  return (\n    <ScrollBox>\n      <Typography variant=\"h1\" padding={2} paddingTop={6}>\n        최근 출시 앨범\n      </Typography>\n      <NowReleases />\n\n      <Typography variant=\"h1\" padding={2} paddingTop={6}>\n        '가사없는 노래모음' 플레이리스트\n      </Typography>\n      <RecommendTrakcs playlist_id=\"5RgNs2EP5ajOgXpQxlATTT\" />\n\n      <Typography variant=\"h1\" padding={2} paddingTop={6}>\n        추천 아티스트\n      </Typography>\n      <Albums keyword={\"아이브\"} type={[SEARCH_TYPE.Artist]} limit={6} />\n\n      <Typography variant=\"h1\" padding={2} paddingTop={6}>\n        주인장 플레이리스트\n      </Typography>\n      <RecommendTrakcs playlist_id=\"1XcLX76RkDfQX8aXXO4jBP\" />\n    </ScrollBox>\n  );\n};\nexport default HomePage;\n\nconst ScrollBox = styled(\"div\")`\n  max-height: 100%;\n  overflow: scroll;\n  padding-bottom: 5rem;\n`;\n","import { useInfiniteQuery } from \"@tanstack/react-query\";\nimport { searchitems } from \"../api/searchApi\";\nimport { SearchReq } from \"../models/search\";\nimport useGetSpoAccessToken from \"./useGetSpoAccessToken\";\n\nconst useSearchitems = (params: SearchReq) => {\n  const clientToken = useGetSpoAccessToken();\n\n  return useInfiniteQuery({\n    queryKey: [\"search\", params.q, params.type],\n    queryFn: ({ pageParam = 0 }) => {\n      if (clientToken) {\n        return searchitems(clientToken, {\n          ...params,\n          offset: pageParam,\n        });\n      }\n      return undefined;\n    },\n    enabled: !!params.q && !!clientToken,\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      if (!lastPage) return undefined;\n\n      const nextPageUrl =\n        lastPage.tracks?.next ||\n        lastPage.artists?.next ||\n        lastPage.albums?.next ||\n        lastPage.playlists?.next ||\n        lastPage.shows?.next ||\n        lastPage.episodes?.next ||\n        lastPage.audiobooks?.next;\n\n      if (nextPageUrl) {\n        const url = new URL(nextPageUrl);\n        const nextOffset = url.searchParams.get(\"offset\");\n        return nextOffset ? parseInt(nextOffset) : undefined;\n      }\n    },\n  });\n};\n\nexport default useSearchitems;\n","import axios from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\nimport { SearchReq, SearchRes } from \"../models/search\";\n\nexport const searchitems = async (\n  token: string,\n  params: SearchReq\n): Promise<SearchRes> => {\n  try {\n    const searchParams = new URLSearchParams();\n    searchParams.append(\"q\", params.q);\n    searchParams.append(\"type\", params.type.join(\",\"));\n\n    if (params.market) searchParams.append(\"market\", params.market.toString());\n    if (params.limit) searchParams.append(\"limit\", params.limit.toString());\n    if (params.offset) searchParams.append(\"offset\", params.offset.toString());\n    if (params.include_external)\n      searchParams.append(\"include_external\", params.include_external);\n\n    const res = await axios.get(`${SPOTIFY_BASE_URL}/search`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      params: searchParams,\n    });\n    return res.data;\n  } catch (err) {\n    throw new Error(\"실패: 검색 결과 가져오기\");\n  }\n};\n"],"names":["_objectWithoutProperties","e","t","o","r","i","Object","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call","useGetSpoAccessToken","data","useQuery","queryKey","queryFn","getSpotifyToken","access_token","_ref","errMessage","_jsxs","Alert","severity","children","Axios","AxiosError","CanceledError","isCancel","CancelToken","VERSION","all","Cancel","isAxiosError","spread","toFormData","AxiosHeaders","HttpStatusCode","formToJSON","getAdapter","mergeConfig","getCurrentUserPlaylists","async","limit","offset","api","get","params","err","Error","getPlaylist","concat","playlist_id","_err$response","console","log","response","status","getPlaylistItems","createPlaylist","user_id","name","collaborative","description","post","public","addItemstoPlaylist","_err$response2","getPlaylistItems_home","token","_ref2","axios","SPOTIFY_BASE_URL","headers","Authorization","useFouces","isfocuse","setIsfocuse","useState","on","off","create","baseURL","localStorage","getItem","interceptors","request","use","req","CardGridList","styled","_templateObject","_taggedTemplateLiteral","theme","breakpoints","down","_albums$images$","albums","focuse","CardBox","onMouseOver","onMouseLeave","PicBox","_jsx","src","images","url","alt","className","PlayBtn","onClick","handleGoSpotifyWeb","goSpotify","type","id","Title","Typography","variant","artists","_templateObject2","_templateObject3","props","_excluded","Btn","_objectSpread","PlayArrow","SEARCH_TYPE","isEpisode","track","_artists$images$","MusicIcon","window","open","NowReleases","error","isLoading","useGetNewReleases","clientToken","getNewReleases","LoadingBar","ErrorMessage","message","items","map","item","idx","CardList","imgUrl","mainTitle","subTitle","useGetPlaylistItem","_item$track$album$ima","imageSrc","imgaes","album","artistName","CardBoxBasic","keyword","useSearchitems","q","pages","page","_page$artists","ArtistCardList","HomePage","ScrollBox","padding","paddingTop","RecommendTrakcs","Albums","Artist","useInfiniteQuery","pageParam","searchParams","URLSearchParams","append","join","market","toString","include_external","searchitems","enabled","initialPageParam","getNextPageParam","lastPage","_lastPage$tracks","_lastPage$artists","_lastPage$albums","_lastPage$playlists","_lastPage$shows","_lastPage$episodes","_lastPage$audiobooks","nextPageUrl","tracks","next","playlists","shows","episodes","audiobooks","nextOffset","URL","parseInt","undefined"],"sourceRoot":""}