{"version":3,"file":"852.js?ver=cbbefe60358f9d293516","mappings":"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","sources":["webpack://spotify-deemo/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://spotify-deemo/./src/image/music.png","webpack://spotify-deemo/./src/Layout/ErrorMessage.tsx","webpack://spotify-deemo/./src/hook/useInfiniteScroll.ts","webpack://spotify-deemo/./src/api/playlist.ts","webpack://spotify-deemo/./src/utils/crypto.ts","webpack://spotify-deemo/./src/utils/auth.ts","webpack://spotify-deemo/./src/hook/useFocuse.ts","webpack://spotify-deemo/./src/Layout/component/Library/EmptyPlayList.tsx","webpack://spotify-deemo/./src/image/playIcon.png","webpack://spotify-deemo/./src/Layout/component/Library/PlaylistItem.tsx","webpack://spotify-deemo/./src/Layout/component/Library/Library.tsx","webpack://spotify-deemo/./src/share/ui/DataStateRender.tsx","webpack://spotify-deemo/./src/api/__baseAIP.ts","webpack://spotify-deemo/./src/style/LodingBox.tsx","webpack://spotify-deemo/./src/query/useGetCurrentUserPlaylists.ts","webpack://spotify-deemo/./src/image/BookmarkIcon.png","webpack://spotify-deemo/./src/api/userApi.ts","webpack://spotify-deemo/./src/query/useGetProfile.ts","webpack://spotify-deemo/./node_modules/@mui/icons-material/esm/Add.js","webpack://spotify-deemo/./src/Layout/component/Library/LibraryHead.tsx","webpack://spotify-deemo/./src/query/useCreatePlaylist.ts"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","export default __webpack_public_path__ + \"images/music.png?ver=708d7d1874e81d24a372040f4906d76d\";","import { Alert } from \"@mui/material\";\n\nconst ErrorMessage = ({ errMessage }: { errMessage: string }) => {\n  return <Alert severity=\"error\">{errMessage} </Alert>;\n};\n\nexport default ErrorMessage;\n","import { useEffect } from \"react\";\n\nconst useInfiniteScroll = ({\n  page,\n  isLoading,\n  isFinished,\n  onIntersect,\n}: {\n  page: string;\n  isLoading: boolean;\n  isFinished: boolean;\n  onIntersect: () => void;\n}) => {\n  useEffect(() => {\n    if (isLoading) return;\n    if (isFinished) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting) {\n          onIntersect();\n        }\n      },\n      { threshold: 0 }\n    );\n\n    const observerTarget = document.getElementById(`observer-${page}`);\n    if (observerTarget) observer.observe(observerTarget);\n\n    return () => {\n      if (observerTarget) observer.unobserve(observerTarget);\n    };\n  }, [isLoading, isFinished, onIntersect]);\n};\n\nexport default useInfiniteScroll;\n","import axios, { isAxiosError } from \"axios\";\nimport {\n  AddItemToPlaylist,\n  CreatePlaylist,\n  GetCurrentUserPlaylistReq,\n  GetCurrentUserPlaylistRes,\n  GetPlaylistItemsReq,\n  GetPlaylistItemsRes,\n  GetPlaylistReq,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"./__baseAIP\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistReq): Promise<GetCurrentUserPlaylistRes> => {\n  try {\n    const res = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"실패: playlist 가져오기\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistReq\n): Promise<Playlist> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail getPlaylist\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsReq\n): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    });\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylist\n): Promise<Playlist> => {\n  try {\n    const { name, collaborative, description } = params;\n    const res = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: params.public,\n      collaborative,\n      description,\n    });\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail createPlaylist\");\n  }\n};\n\nexport const addItemstoPlaylist = async (\n  params: AddItemToPlaylist\n): Promise<{ snapshot_id: string }> => {\n  try {\n    const res = await api.post(\n      `/playlists/${params.playlist_id}/tracks`,\n      params\n    );\n\n    return res.data;\n  } catch (err) {\n    if (isAxiosError(err) && err.response?.status === 401)\n      throw new Error(\"retry\"); // 로그인 다시\n    throw new Error(\"fail add item to playlist\");\n  }\n};\n\n/** 기존거에서 acToken -> clientToken 순으로 검사해서 토큰 전달하는걸로 수정바람 */\nexport const getPlaylistItems_home = async ({\n  token,\n  params,\n}: {\n  token: string;\n  params: GetPlaylistItemsReq;\n}): Promise<GetPlaylistItemsRes> => {\n  try {\n    const res = await axios.get(\n      `${SPOTIFY_BASE_URL}/playlists/${params.playlist_id}/tracks`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        params,\n      }\n    );\n\n    return res.data;\n  } catch (err) {\n    throw new Error(\"fail getPlaylistItems\");\n  }\n};\n","// https://developer.spotify.com/documentation/web-api/tutorials/code-pkce-flow\n\nexport const generateRandomString = (length: number): string => {\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const values = crypto.getRandomValues(new Uint8Array(length));\n  return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n};\n\nexport const sha256 = async (plain: string): Promise<ArrayBuffer> => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(plain);\n  return window.crypto.subtle.digest(\"SHA-256\", data);\n};\n\nexport const base64encode = (input: ArrayBuffer) => {\n  return btoa(String.fromCharCode(...new Uint8Array(input)))\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n};\n","import { clientID, SCOPES } from \"../configs/auth\";\nimport { REDIRCT_URI } from \"../configs/commonConfig\";\nimport { AuthParamsType } from \"../models/auth\";\nimport { base64encode, generateRandomString, sha256 } from \"./crypto\";\n\nexport const getSpotifyLogin = async () => {\n  const codeVerifier = generateRandomString(64);\n  const hashed = await sha256(codeVerifier);\n  const codeChallenge = base64encode(hashed);\n\n  const clientId = clientID;\n  const redirectUri = REDIRCT_URI;\n\n  const scope = SCOPES;\n  const authUrl = new URL(\"https://accounts.spotify.com/authorize\");\n\n  // generated in the previous step\n  window.localStorage.setItem(\"code_verifier\", codeVerifier);\n\n  if (clientId && redirectUri) {\n    const params: AuthParamsType = {\n      response_type: \"code\",\n      client_id: clientId,\n      scope,\n      code_challenge_method: \"S256\",\n      code_challenge: codeChallenge,\n      redirect_uri: redirectUri,\n    };\n\n    authUrl.search = new URLSearchParams(Object.entries(params)).toString();\n\n    // console.log(authUrl.search);\n    window.location.href = authUrl.toString(); // spotify login 주소 열림\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"code_verifier\");\n  localStorage.removeItem(\"access_token\");\n  window.location.href = \"/\";\n};\n","import { useState } from \"react\";\n\nconst useFouces = () => {\n  const [isfocuse, setIsfocuse] = useState<\"show\" | \"none\">(\"none\");\n\n  const on = () => setIsfocuse(\"show\");\n  const off = () => setIsfocuse(\"none\");\n\n  return { isfocuse, on, off };\n};\n\nexport default useFouces;\n","import { Button, styled, Typography } from \"@mui/material\";\n\nconst EmptyPlayList = () => {\n  return (\n    <EmptyPlaylistCard>\n      <Typography variant=\"h2\" fontWeight={700}>\n        첫 번째 플레이리스트를 만드세요.\n      </Typography>\n      <div>어렵지 않아요. 저희가 도와드릴게요.</div>\n\n      <CreateBtn variant=\"contained\" color=\"secondary\">\n        플레이리스트 만들기\n      </CreateBtn>\n    </EmptyPlaylistCard>\n  );\n};\n\nexport default EmptyPlayList;\n\nconst EmptyPlaylistCard = styled(\"div\")`\n  padding: 1.5rem;\n  margin-top: 0.5rem;\n  color: white;\n  background-color: #1a1a1a;\n  border-radius: 8;\n`;\n\nconst CreateBtn = styled(Button)`\n  margin-top: 1rem;\n  font-weight: 700;\n`;\n","export default __webpack_public_path__ + \"images/playIcon.png?ver=7a010c498114f1e71e07aada8cdfc680\";","import { styled, Typography } from \"@mui/material\";\nimport useFouces from \"../../../hook/useFocuse\";\nimport MusicIcon from \"../../../image/music.png\";\nimport playIcon from \"../../../image/playIcon.png\";\nimport { SimplifiedPlaylist } from \"../../../models/playlist\";\n\nconst Playlist = ({\n  item,\n  isSelect,\n  ...props\n}: {\n  item: SimplifiedPlaylist;\n  isSelect: boolean;\n  onClick: () => void;\n}) => {\n  const focuse = useFouces();\n\n  return (\n    <ItemBox\n      {...props}\n      className={isSelect ? \"select\" : \"\"}\n      onMouseOver={focuse.on}\n      onMouseLeave={focuse.off}\n    >\n      <PicBox>\n        <PlayIcon src={playIcon} className={focuse.isfocuse} />\n\n        {item.images ? (\n          <img src={item.images[0].url} alt={\"썸네일\"} />\n        ) : (\n          <img className=\"musicIcon\" src={MusicIcon} alt=\"음악 아이콘\" />\n        )}\n      </PicBox>\n\n      <div>\n        <Typography fontSize={16}>{item.name}</Typography>\n        <Typography color=\"#B3B3B3\">\n          플레이리스트 • {item?.owner?.display_name || \"알수없음\"}\n        </Typography>\n      </div>\n    </ItemBox>\n  );\n};\n\nexport default Playlist;\n\nconst ItemBox = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  padding: 0.6rem;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &.select {\n    background-color: #404040;\n  }\n  &:hover {\n    background-color: #1c1c1c;\n  }\n`;\nconst PicBox = styled(\"div\")`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 3.5rem;\n  aspect-ratio: 1/1;\n  margin-right: 1rem;\n  border-radius: 4px;\n  overflow: hidden;\n  background-color: #313131;\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n  img.musicIcon {\n    width: 70%;\n    height: 70%;\n  }\n`;\nconst PlayIcon = styled(\"img\")`\n  display: none;\n  position: absolute;\n  background-color: #0000007f;\n  &.show {\n    display: block;\n  }\n`;\n","import styled from \"@mui/styled-engine-sc\";\nimport { useNavigate, useParams } from \"react-router\";\nimport useInfiniteScroll from \"../../../hook/useInfiniteScroll\";\nimport useGetCurrentUserPlaylists from \"../../../query/useGetCurrentUserPlaylists\";\nimport useGetProfile from \"../../../query/useGetProfile\";\nimport DataStateRender from \"../../../share/ui/DataStateRender\";\nimport LoadState, { Observer } from \"../../../style/LodingBox\";\nimport EmptyPlayList from \"./EmptyPlayList\";\nimport PlaylistItem from \"./PlaylistItem\";\n\n// 상수 분리\nconst LiBRARY_PAGE_NAME = {\n  mobile: \"library-mobile\",\n  desktop: \"library\",\n};\n\nconst Library = ({ isMobile }: { isMobile?: boolean }) => {\n  const Navigate = useNavigate();\n  const { id = \"\" } = useParams();\n  const { data: user } = useGetProfile();\n  const {\n    data,\n    isLoading,\n    error,\n    hasNextPage, // 다음페이지 있는지?: boolean\n    fetchNextPage, // 다음페이지 가져오는 함수\n    isFetchingNextPage, // 다음페이지 가져오는 중인지? : boolean\n  } = useGetCurrentUserPlaylists({\n    enabled: !!user, // user가 있을 때만 실행\n  });\n\n  // 커스텀 무한 스크롤\n  const pageName = isMobile\n    ? LiBRARY_PAGE_NAME.mobile\n    : LiBRARY_PAGE_NAME.desktop;\n\n  useInfiniteScroll({\n    page: pageName,\n    isLoading: isFetchingNextPage,\n    isFinished: !hasNextPage,\n    onIntersect: fetchNextPage,\n  });\n\n  const goPlaylistDetail = (id: string) => Navigate(`/playlist/${id}`);\n\n  const stateComponent = DataStateRender({\n    isEmpty: !user || !data?.pages || data.pages[0].total === 0,\n    EmptyComponet: EmptyPlayList,\n    isLoading: isLoading,\n    isError: error,\n  });\n\n  if (stateComponent) return stateComponent;\n\n  return (\n    <ListBox>\n      {data?.pages.map((page) =>\n        page.items.map((item, idx) => (\n          <PlaylistItem\n            key={idx}\n            item={item}\n            onClick={() => goPlaylistDetail(item.id || \"\")}\n            isSelect={id === item.id}\n          />\n        ))\n      )}\n\n      <LoadState isLoading={isFetchingNextPage} isFinished={!hasNextPage} />\n      {!isFetchingNextPage && <Observer id={`observer-${pageName}`} />}\n    </ListBox>\n  );\n};\n\nexport default Library;\n\nconst ListBox = styled(\"div\")`\n  height: 100%;\n  padding-bottom: 7rem;\n  overflow: scroll;\n`;\n","import ErrorMessage from \"../../Layout/ErrorMessage\";\nimport LoadingBar from \"../../style/LoadingBar\";\n\nconst DataStateRender = ({\n  isLoading,\n  isError,\n  isEmpty = false,\n  EmptyComponet,\n}: {\n  isLoading: boolean;\n  isError: Error | null;\n  isEmpty?: boolean;\n  EmptyComponet?: React.ComponentType;\n}) => {\n  if (isLoading) return <LoadingBar />;\n  if (isError) return <ErrorMessage errMessage={isError.message} />;\n  if (isEmpty && EmptyComponet) {\n    return <EmptyComponet />;\n  }\n  return null;\n};\n\nexport default DataStateRender;\n","import axios, { AxiosInstance } from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nconst api: AxiosInstance = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n  },\n});\n\napi.interceptors.request.use((req) => {\n  req.headers.Authorization = `Bearer ${localStorage.getItem(\"access_token\")}`;\n\n  return req;\n});\n\nexport default api;\n","import styled from \"@mui/styled-engine-sc\";\nimport { LoadingSpinner } from \"./LoadingBar\";\n\nconst LoadState = ({\n  isLoading,\n  isFinished,\n  showText = true,\n}: {\n  isLoading: boolean;\n  isFinished: boolean;\n  showText?: boolean;\n}) => {\n  return (\n    <Loding>\n      {isLoading ? (\n        <LoadingSpinner width={30} height={30} />\n      ) : isFinished && showText ? (\n        <div>마지막 입니다.</div>\n      ) : (\n        <></>\n      )}\n    </Loding>\n  );\n};\n\nexport default LoadState;\n\nconst Loding = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 3rem;\n  font-size: 14px;\n  color: #858585;\n`;\n\nexport const Observer = styled(\"div\")`\n  height: 1rem;\n  /* background-color: yellow; */\n`;\n","import { useInfiniteQuery } from \"@tanstack/react-query\";\nimport { getCurrentUserPlaylists } from \"../api/playlist\";\nimport { GetCurrentUserPlaylistReq } from \"../models/playlist\";\n\nconst useGetCurrentUserPlaylists = ({\n  limit = 10,\n  enabled,\n}: GetCurrentUserPlaylistReq & { enabled: boolean }) => {\n  return useInfiniteQuery({\n    queryKey: [\"current-user-playlists\"],\n    queryFn: ({ pageParam }) => {\n      return getCurrentUserPlaylists({ limit, offset: pageParam });\n    },\n    enabled,\n    initialPageParam: 0, // 시작 value\n    getNextPageParam: (lastPage) => {\n      // infinitQuery 핵심.\n      // 해당 함수의 리턴값이 pageParam으로 전달된다\n      if (lastPage.next) {\n        const url = new URL(lastPage.next);\n        const nextOffset = url.searchParams.get(\"offset\");\n        return nextOffset ? parseInt(nextOffset) : undefined;\n      }\n      return undefined; // undefined를 호출하면 알아서 멈춘다.\n    },\n  });\n};\n\nexport default useGetCurrentUserPlaylists;\n","export default __webpack_public_path__ + \"images/BookmarkIcon.png?ver=b29bf0ae7706e635c9f6294781e08862\";","import { UserProfile } from \"../models/user\";\nimport { logout } from \"../utils/auth\";\nimport api from \"./__baseAIP\";\n\nexport const getCurrentUserProfile = async (): Promise<UserProfile> => {\n  try {\n    const res = await api.get(\"/me\");\n    return res.data;\n  } catch (err) {\n    logout();\n    throw new Error(\"프로필 얻기 실패\");\n  }\n};\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { getCurrentUserProfile } from \"../api/userApi\";\nimport { UserProfile } from \"../models/user\";\n\nconst useGetProfile = (): UseQueryResult<UserProfile> => {\n  const accessToken = localStorage.getItem(\"access_token\");\n\n  return useQuery({\n    queryKey: [\"current-user-profile\"],\n    queryFn: getCurrentUserProfile,\n    enabled: !!accessToken, // ac 토큰이 있을 때만 실행\n    staleTime: Infinity, // 무한대로 설정하여 한 번 받아온 데이터는 계속 신선한 것으로 간주\n    refetchOnWindowFocus: false, // 윈도우 포커스 시 재요청 방지\n    refetchOnMount: false, // 컴포넌트 마운트 시 재요청 방지 (이미 캐시된 데이터가 있는 경우)\n    retry: 1, // 실패 시 1번만 재시도\n  });\n};\n\nexport default useGetProfile;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","import { Box, Button, styled, Typography } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport BookmarkIcon from \"../../../image/BookmarkIcon.png\";\nimport useCreatePlaylist from \"../../../query/useCreatePlaylist\";\n\nconst LibraryHead = () => {\n  const { mutate: createPlaylist } = useCreatePlaylist();\n  const handleCreatePlaylist = () => {\n    createPlaylist({ name: \"내 풀레이리스트\" });\n  };\n\n  return (\n    <Head>\n      <Box display=\"flex\">\n        <Icon src={BookmarkIcon} alt=\"북마크 아이콘\" />\n        <Typography variant=\"h2\" fontWeight={700}>\n          내 라이브러리\n        </Typography>\n      </Box>\n\n      <Button onClick={handleCreatePlaylist}>\n        <AddIcon />\n      </Button>\n    </Head>\n  );\n};\n\nexport default LibraryHead;\n\nconst Head = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 1rem;\n`;\nconst Icon = styled(\"img\")`\n  width: 25px;\n  margin-right: 20px;\n`;\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createPlaylist } from \"../api/playlist\";\nimport { CreatePlaylist } from \"../models/playlist\";\nimport useGetProfile from \"./useGetProfile\";\nimport { getSpotifyLogin } from \"../utils/auth\";\n\nconst useCreatePlaylist = () => {\n  const queryClient = useQueryClient();\n  const { data: user } = useGetProfile();\n\n  return useMutation({\n    mutationFn: (params: CreatePlaylist) => {\n      if (user && user.id) {\n        return createPlaylist(user?.id, params);\n      }\n      getSpotifyLogin(); // user정보 없을 시 login\n      return Promise.reject(new Error(\"user is not defined\"));\n    },\n    onSuccess: () => {\n      // refetch\n      queryClient.invalidateQueries({ queryKey: [\"current-user-playlists\"] });\n    },\n  });\n};\n\nexport default useCreatePlaylist;\n"],"names":["_objectWithoutProperties","e","t","o","r","i","Object","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call","_ref","errMessage","_jsxs","Alert","severity","children","page","isLoading","isFinished","onIntersect","useEffect","observer","IntersectionObserver","entries","isIntersecting","threshold","observerTarget","document","getElementById","concat","observe","unobserve","getCurrentUserPlaylists","async","limit","offset","api","get","params","data","err","Error","getPlaylist","playlist_id","_err$response","console","log","isAxiosError","response","status","getPlaylistItems","createPlaylist","user_id","name","collaborative","description","post","public","addItemstoPlaylist","_err$response2","getPlaylistItems_home","token","_ref2","axios","SPOTIFY_BASE_URL","headers","Authorization","getSpotifyLogin","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","clientID","redirectUri","REDIRCT_URI","scope","SCOPES","authUrl","URL","localStorage","setItem","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","URLSearchParams","toString","location","href","logout","removeItem","useFouces","isfocuse","setIsfocuse","useState","on","off","EmptyPlayList","EmptyPlaylistCard","_jsx","Typography","variant","fontWeight","CreateBtn","color","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","_item$owner","item","isSelect","props","_excluded","focuse","ItemBox","_objectSpread","className","onMouseOver","onMouseLeave","PicBox","PlayIcon","src","playIcon","images","url","alt","MusicIcon","fontSize","owner","display_name","_templateObject3","isMobile","Navigate","useNavigate","id","useParams","user","useGetProfile","error","hasNextPage","fetchNextPage","isFetchingNextPage","useGetCurrentUserPlaylists","enabled","pageName","useInfiniteScroll","stateComponent","isError","isEmpty","EmptyComponet","LoadingBar","ErrorMessage","message","DataStateRender","pages","total","ListBox","map","items","idx","PlaylistItem","onClick","goPlaylistDetail","LoadState","Observer","create","baseURL","getItem","interceptors","request","use","req","showText","Loding","LoadingSpinner","width","height","_Fragment","useInfiniteQuery","queryKey","queryFn","pageParam","initialPageParam","getNextPageParam","lastPage","next","nextOffset","searchParams","parseInt","undefined","getCurrentUserProfile","accessToken","useQuery","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","retry","createSvgIcon","d","LibraryHead","mutate","useCreatePlaylist","queryClient","useQueryClient","useMutation","mutationFn","Promise","reject","onSuccess","invalidateQueries","Head","Box","display","Icon","BookmarkIcon","handleCreatePlaylist","AddIcon"],"sourceRoot":""}